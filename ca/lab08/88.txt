
№1
.macro exit
    li      a7, 10
    ecall
.end_macro

.macro print_hex(%x)
    mv      a0, %x
    li      a7, 34
    ecall
.end_macro

.macro newline
    li      a0, '\n'
    li      a7, 11
    ecall
.end_macro

.macro from_hex_keyboard(%cres, %result) 
li t0, 0xffffff88
bne %cres, t0, crit
li %result, 15
j end

crit:

li t0, 16
rem t0, %cres, t0 
li t1, 16
div t1, %cres, t1 #get hex digit 2
li t3, 2
div t0, t0, t3 #n
div t1, t1, t3 #m
li t3, 4

bne t0, t3, crat
li t0, 3
crat:
bne t1, t3, crop
li t1, 3
crop:


mul t0, t0, t3 #4n
add %result, t0, t1  #4n+m
end:
.end_macro 

.macro to_seven_segment(%creiip, %result) #used: t0, t1
li t0, 0x3f
li t1, 0
beq %creiip, t1, dothing

li t0, 0x30
li t1, 1
beq %creiip, t1, dothing

li t0, 0x5b
li t1, 2
beq %creiip, t1, dothing

li t0, 0x4f
li t1, 3
beq %creiip, t1, dothing

li t0, 0x66
li t1, 4
beq %creiip, t1, dothing

li t0, 0x6d
li t1, 5
beq %creiip, t1, dothing

li t0, 0x7d
li t1, 6
beq %creiip, t1, dothing

li t0, 0x07
li t1, 7
beq %creiip, t1, dothing

li t0, 0x7f
li t1, 8
beq %creiip, t1, dothing

li t0, 0x6f
li t1, 9
beq %creiip, t1, dothing

dothing:
mv %result, t0
.end_macro

.macro display_a_nigga(%first, %second)
lui t4, 0xffff0
to_seven_segment(%first, t5)
to_seven_segment(%second, t6)

sb t6, 0x10(t4)
sb t5, 0x11(t4)
.end_macro

    .text
main:
    lui     s0, 0xffff0   
    mv      s1, zero      
    mv      s2, zero      
    li      s3, 20        
loop:
    li      t0, 1         
    sb      t0, 0x12(s0)  
    lb      t1, 0x14(s0)  
    bnez    t1, pressed   

    li      t0, 2         
    sb      t0, 0x12(s0)
    lb      t1, 0x14(s0)
    bnez    t1, pressed

    li      t0, 4         
    sb      t0, 0x12(s0)
    lb      t1, 0x14(s0)
    bnez    t1, pressed

    li      t0, 8        
    sb      t0, 0x12(s0)
    lb      t1, 0x14(s0)
    bnez    t1, pressed

    mv      s2, zero  
    j       loop  
pressed:
    beq     t1, s2, loop 
    mv      s2, t1 

    print_hex(t1)
    newline
    
    from_hex_keyboard(s2, a3)
    li t0, 10
    div a0, a3, t0
    rem a1, a3, t0
    
    display_a_nigga(a0, a1)

    addi    s1, s1, 1    
    ble     s1, s3, loop 
end:
    exit

№2
.data
found:
.ascii "FOUND"
.align 8
stopped:
.ascii "STOPPED"

.macro read_hex(%reg, %result) 
li t0, 0xffffff88
bne %reg, t0, label1
li %result, 15
j end
label1:

li t0, 16
rem t0, %reg, t0 
li t1, 16
div t1, %reg, t1 
li t3, 2
div t0, t0, t3 
div t1, t1, t3 
li t3, 4

bne t0, t3, label2
li t0, 3
label2:
bne t1, t3, pseudolog
li t1, 3
pseudolog:

mul t0, t0, t3 
add %result, t0, t1  
end:
.end_macro 

    .text    
    li      a7, 5
    ecall
    mv      s4, a0          
    lui     s0, 0xffff0
    li      s1, 16     
    li      s9, 0x10000000     
    li      s6, 7      
    mv      s2, zero     
    li      s3, 0      
    mv      s5, zero      
loop:
    li      t0, 1        
    sb      t0, 0x12(s0) 
    lb      t1, 0x14(s0) 
    bnez    t1, activate  

    li      t0, 2        
    sb      t0, 0x12(s0)
    lb      t1, 0x14(s0)
    bnez    t1, activate

    li      t0, 4        
    sb      t0, 0x12(s0)
    lb      t1, 0x14(s0)
    bnez    t1, activate

    li      t0, 8         
    sb      t0, 0x12(s0)
    lb      t1, 0x14(s0)
    bnez    t1, activate
    
    mv      s5, zero
    j       loop          
activate:
    beq     t1, s5, loop
    mv s5, t1
    
    read_hex(s5, a0)
    mul a0, a0, s9
    add s2, s2, a0

    beq s6, s3, number
    div s9, s9, s1
    addi s6, s6, -1   
    j loop
number:
    beq s4, s2, success
    beqz s2, breaked
    mv s2, zero
    li s6, 7
    li s9, 0x10000000
    j loop 
success:
    li a7, 4
    la a0, found
    ecall
    j end
breaked:
    li a7, 4
    la a0, stopped
    ecall
end:

№3

    .include "macrolib.s"
    
    .eqv   ALLSIZE 0x4000      
    .eqv   BASE    0x10010000  
    .eqv   BORD    0x80
    
.text
read_int(a3)
read_int(a4) 
li s2, 32
li s3, 96 
loop:
beqz a4, end
mv a7, s3
slli a7, a7, 2
li t2, BASE
mv a5, s2
li t1, 128   
mul t3, t1, s3
add t3, t3, s3
slli t3, t3, 2
li t2, BASE
add a7, t2, t3 
loop1:
beq a5, s3, loop1end
addi a5, a5, 1
sub a6, a5, s2
slli a6, a6, 2
sub a6, a7, a6
sw a3, 0(a6)
j loop1
loop1end:
mv a5, s2 
li t2, 128   
mul a7, a5, t2
slli a7, a7, 2
li t2, BASE
add a7, a7, t2
loop2:
beq a5, s3, loop2end
slli a6, a5, 2
add a6, a6, a7 
sw a3, 0(a6)
addi a5, a5, 1
j loop2
loop2end:
mv a5, s2
mv a7, s3
slli a7, a7, 2
li t2, BASE
add a7, a7, t2
loop3:
beq a5, s3, loop3end
li t2, 128
mul a6, a5, t2
slli a6, a6, 2
add a6, a6, a7
sw a3, 0(a6)
addi a5, a5, 1
j loop3
loop3end:
mv a5, s2
li t2, 128
mul a7, t2, t2
sub a7, a7, s3
slli a7, a7, 2
li t2, BASE
add a7, a7, t2
loop4:
beq a5, s3, loop4end
li t2, 128
mul a6, a5, t2
slli a6, a6, 2
sub a6, a7, a6
sw a3, 0(a6)
addi a5, a5, 1
j loop4
loop4end:
addi a4, a4, -1
addi s2, s2, 1
addi s3, s3, -1
j loop
end:
